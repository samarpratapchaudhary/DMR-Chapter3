/* In a two’s complement number representation, our version of itoa does not handle the largest negative number, i.e., the value of n equal to –(2^wordsize – 1). Explain why not. Modify it to print that value correctly regardless of the machine on which it runs. */
#include <stdio.h>
#include <string.h>

void reverse(char s[]);
void itoa(int n, char s[]);

int main() {
    int num;
    char str[50];

    printf("Enter an integer: ");
    scanf("%d", &num);

    itoa(num, str);
    printf("String: %s\n", str);

    return 0;
}

void itoa(int n, char s[]) {
    int i, sign;
    unsigned int num;   // use unsigned to handle extreme negative

    sign = n;
    if (n < 0)
        num = -((unsigned int)n);  // safely convert
    else
        num = n;

    i = 0;
    do {
        s[i++] = num % 10 + '0';
    } while ((num /= 10) > 0);

    if (sign < 0)
        s[i++] = '-';
    s[i] = '\0';

    reverse(s);
}

void reverse(char s[]) {
    int i, j;
    char c;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}
